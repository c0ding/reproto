{
  "openapi": "3.0.0",
  "info": {},
  "servers": [
    {
      "url": "http://example.com"
    }
  ],
  "paths": {
    "/simple/{id}": {
      "get": {
        "operationId": "get_simple",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entry"
                }
              }
            }
          }
        }
      }
    },
    "/simple": {
      "post": {
        "operationId": "post_simple",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceEntry"
              }
            }
          }
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/entry": {
      "get": {
        "operationId": "get_entry",
        "description": "# Endpoint to get a really complicated entity called `Entry` for some reason.\n\nThe entity has a ton of optional fields.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntry"
                }
              }
            }
          }
        }
      }
    },
    "/state": {
      "get": {
        "operationId": "get_state",
        "description": "Endpoint to get the state of the service.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/State"
                }
              }
            }
          }
        }
      }
    },
    "/error-code": {
      "get": {
        "operationId": "get_error_code",
        "description": "Endpoint to get the error code of the service",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCode"
                }
              }
            }
          }
        }
      }
    },
    "/point": {
      "get": {
        "operationId": "get_point",
        "description": "Endpoint to retrieve a single point.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Point"
                }
              }
            }
          }
        }
      }
    },
    "/tagged": {
      "get": {
        "operationId": "get_tagged",
        "description": "Endpoint to retrieve a single tagged interface.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tagged"
                }
              }
            }
          }
        }
      }
    },
    "/untagged": {
      "get": {
        "operationId": "get_untagged",
        "description": "Endpoint to retrieve a single untagged interface.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Untagged"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Entry": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ServiceEntry": {
        "type": "object",
        "description": "A bizarre entry with many different optional fields.",
        "properties": {
          "boolean_type": {
            "type": "boolean"
          },
          "string_type": {
            "type": "string"
          },
          "datetime_type": {
            "type": "string",
            "format": "date-time"
          },
          "unsigned_32": {
            "type": "integer",
            "format": "uint32"
          },
          "unsigned_64": {
            "type": "integer",
            "format": "uint64"
          },
          "signed_32": {
            "type": "integer",
            "format": "int32"
          },
          "signed_64": {
            "type": "integer",
            "format": "int64"
          },
          "float_type": {
            "type": "integer",
            "format": "float"
          },
          "double_type": {
            "type": "integer",
            "format": "double"
          },
          "bytes_type": {
            "type": "string",
            "format": "byte"
          },
          "any_type": {
            "$ref": "#/components/schemas/Any"
          }
        }
      },
      "State": {
        "type": "string",
        "enum": [
          "open",
          "closed"
        ]
      },
      "ErrorCode": {
        "type": "integer",
        "format": "uint32",
        "enum": [
          400,
          500
        ]
      },
      "Point": {
        "type": "array",
        "format": "tuple",
        "required": [
          0,
          1
        ],
        "properties": {
          "0": {
            "type": "integer",
            "format": "uint64"
          },
          "1": {
            "type": "integer",
            "format": "double"
          }
        }
      },
      "Tagged": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TaggedA"
          },
          {
            "$ref": "#/components/schemas/TaggedB"
          },
          {
            "$ref": "#/components/schemas/TaggedBar"
          },
          {
            "$ref": "#/components/schemas/TaggedBaz"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "foo": "#/components/schemas/TaggedA",
            "b": "#/components/schemas/TaggedB",
            "Bar": "#/components/schemas/TaggedBar",
            "Baz": "#/components/schemas/TaggedBaz"
          }
        }
      },
      "Untagged": {
        "description": "An untagged interface.",
        "oneOf": [
          {
            "type": "object",
            "description": "Special case: fields shared with other sub-types.\nNOTE: due to rust support through untagged, the types are matched in-order.",
            "required": [
              "shared",
              "a",
              "b"
            ],
            "properties": {
              "shared": {
                "type": "string"
              },
              "shared_ignore": {
                "type": "string"
              },
              "a": {
                "type": "string"
              },
              "b": {
                "type": "string"
              },
              "ignore": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "shared",
              "a"
            ],
            "properties": {
              "shared": {
                "type": "string"
              },
              "shared_ignore": {
                "type": "string"
              },
              "a": {
                "type": "string"
              },
              "ignore": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "shared",
              "b"
            ],
            "properties": {
              "shared": {
                "type": "string"
              },
              "shared_ignore": {
                "type": "string"
              },
              "b": {
                "type": "string"
              },
              "ignore": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Any": {},
      "TaggedA": {
        "type": "object",
        "required": [
          "@type",
          "shared"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "shared": {
            "type": "string"
          }
        }
      },
      "TaggedB": {
        "type": "object",
        "required": [
          "@type",
          "shared"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "shared": {
            "type": "string"
          }
        }
      },
      "TaggedBar": {
        "type": "object",
        "required": [
          "@type",
          "shared"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "shared": {
            "type": "string"
          }
        }
      },
      "TaggedBaz": {
        "type": "object",
        "required": [
          "@type",
          "shared"
        ],
        "properties": {
          "@type": {
            "type": "string"
          },
          "shared": {
            "type": "string"
          }
        }
      }
    }
  }
}