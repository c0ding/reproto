package service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.grpc.BindableService;
import io.grpc.CallOptions;
import io.grpc.Channel;
import io.grpc.MethodDescriptor;
import io.grpc.MethodDescriptor.Marshaller;
import io.grpc.ServerServiceDefinition;
import io.grpc.stub.AbstractStub;
import io.grpc.stub.ClientCalls;
import io.grpc.stub.ServerCalls;
import io.grpc.stub.StreamObserver;
import io.reproto.MapperProvider;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import javax.annotation.Generated;

public interface HttpService {
  public static final MethodDescriptor<Void, Void> METHOD_GET_SIMPLE = 
    MethodDescriptor.<Void, Void>newBuilder()
      .setType(MethodDescriptor.MethodType.UNKNOWN)
      .setFullMethodName(MethodDescriptor.generateFullMethodName("service.HttpService", "get_simple"))
      .setRequestMarshaller(new VoidMarshaller())
      .setResponseMarshaller(new VoidMarshaller())
      .build();

  public static final MethodDescriptor<Void, Void> METHOD_POST_SIMPLE = 
    MethodDescriptor.<Void, Void>newBuilder()
      .setType(MethodDescriptor.MethodType.UNKNOWN)
      .setFullMethodName(MethodDescriptor.generateFullMethodName("service.HttpService", "post_simple"))
      .setRequestMarshaller(new VoidMarshaller())
      .setResponseMarshaller(new VoidMarshaller())
      .build();

  @Generated("Generated by reproto")
  static class ClientStub extends AbstractStub<ClientStub> {
    public ClientStub(
      final Channel channel
    ) {
      super(channel);
    }

    public ClientStub(
      final Channel channel,
      final CallOptions callOptions
    ) {
      super(channel, callOptions);
    }

    @Override
    protected ClientStub build(final Channel channel, final CallOptions callOptions) {
      return new ClientStub(channel, callOptions);
    }

    public StreamObserver<Void> getSimple(final StreamObserver<Void> observer) {
      return ClientCalls.asyncBidiStreamingCall(getChannel().newCall(METHOD_GET_SIMPLE, getCallOptions()), observer);
    }

    public StreamObserver<Void> postSimple(final StreamObserver<Void> observer) {
      return ClientCalls.asyncBidiStreamingCall(getChannel().newCall(METHOD_POST_SIMPLE, getCallOptions()), observer);
    }
  }

  @Generated("Generated by reproto")
  abstract static class ServerStub implements BindableService {
    public StreamObserver<Void> getSimple(final StreamObserver<Void> observer) {
      return ServerCalls.asyncUnimplementedStreamingCall(METHOD_GET_SIMPLE, observer);
    }

    public StreamObserver<Void> postSimple(final StreamObserver<Void> observer) {
      return ServerCalls.asyncUnimplementedStreamingCall(METHOD_POST_SIMPLE, observer);
    }

    @Override
    public ServerServiceDefinition bindService() {
      return ServerServiceDefinition
        .builder("service.HttpService")
        .addMethod(METHOD_GET_SIMPLE, ServerCalls.asyncBidiStreamingCall(this::getSimple))
        .addMethod(METHOD_POST_SIMPLE, ServerCalls.asyncBidiStreamingCall(this::postSimple))
        .build();
    }
  }

  public static class JsonMarshaller<T> implements MethodDescriptor.Marshaller<T> {
    private final ObjectMapper mapper;
    private final TypeReference<T> type;

    public JsonMarshaller(
      final TypeReference<T> type
    ) {
      this.mapper = MapperProvider.get();
      this.type = type;
    }

    @Override
    public T parse(final InputStream stream) {
      try {
        return this.mapper.readValue(stream, this.type);
      } catch (final Exception e) {
        throw new RuntimeException(e);
      }
    }

    @Override
    public InputStream stream(final T value) {
      final byte[] bytes;
      try {
        bytes = this.mapper.writeValueAsBytes(value);
      } catch (final Exception e) {
        throw new RuntimeException(e);
      }
      return new ByteArrayInputStream(bytes);
    }
  }

  public static class VoidMarshaller implements MethodDescriptor.Marshaller<Void> {
    @Override
    public Void parse(final InputStream stream) {
      return null;
    }

    @Override
    public InputStream stream(final Void value) {
      return new ByteArrayInputStream(new byte[0]);
    }
  }
}
